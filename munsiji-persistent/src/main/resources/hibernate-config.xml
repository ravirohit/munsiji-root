<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-2.5.xsd  
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd 
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
	
	<context:component-scan base-package="com.munsiji." />        
     <context:annotation-config/>
     
     <!-- org.springframework.jdbc.datasource.DriverManagerDataSource -->
    <bean id="myDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/sys"/>
		<property name="username" value="root"/>
		<!-- <property name="password" value="password"/> -->
		<property name="password" value="root"/>
	</bean>
     
    <bean id="mySessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<!-- <property name="annotatedClasses">
			<list>
				<value>com.vaannila.domain.User</value>
			</list>
		</property> -->
		<!-- <property name="packagesToScan" value="com.your.bean.package" /> -->
		<property name="packagesToScan">
		    <list>
		        <value>org.munsiji.persistance.resource</value>
		    </list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<bean id="transactionManager"
	    class="org.springframework.orm.hibernate5.HibernateTransactionManager">
	    <property name="sessionFactory" ref="mySessionFactory" />
	</bean>
	
	<!-- code for batch processing  -->
	<!-- JobRepository and JobLauncher are configuration/setup classes -->
  <!--   <bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />
 
    <bean id="jobLauncher"
        class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    ItemReader which reads from database and returns the row mapped by 
        rowMapper
    <bean id="databaseItemReader"
        class="org.springframework.batch.item.database.JdbcCursorItemReader">
 
        <property name="dataSource" ref="dataSource" />
 
        <property name="sql"
            value="SELECT a.acc_type, a.acc_name, e.date_of_expnse, e.amount FROM user_expense e, user_account a where e.email_id = 'ravi' and e.account_id = a.id;" />
 
        <property name="rowMapper">
            <bean class="org.munsiji.batch.ExpenseResultRowMapper" />
        </property>
 
    </bean>
     Optional JobExecutionListener to perform business logic before and after the job
    <bean id="jobListener" class="com.websystique.springbatch.ExamResultJobListener" />
 
    Optional ItemProcessor to perform business logic/filtering on the input records
    <bean id="itemProcessor" class="org.munsiji.batch.ExpenseResultItemProcessor" />
    
    <bean id="mysqlItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[        
            	update user_expense set calculated = 
            ]]>
	  </value>
	</property>
	It will take care matching between object property and sql name parameter
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>
    
        
    Actual Job
    <batch:job id="expenseResultJob">
        <batch:step id="step1">
            <batch:tasklet> transaction-manager="transactionManager" 
                <batch:chunk reader="databaseItemReader"
                    processor="itemProcessor" commit-interval="10" />   writer="flatFileItemWriter"
            </batch:tasklet>
        </batch:step>
    </batch:job> -->
    
    
    
    <bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"/>
        <!-- <property name = "transactionManager" ref = "transactionManager" /> 
     </bean> -->
 
    <bean id="jobLauncher"
        class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    <!-- Defining a bean --> 
   <bean id = "expenseTasklet" class = "org.munsiji.batch.ExpenseTasklet" />  
   <!-- Defining a job--> 
   <batch:job id = "expenseResultJob">  
      <!-- Defining a Step --> 
      <batch:step id = "step1"> 
         <tasklet ref = "expenseTasklet"/>   
      </batch:step>    
   </batch:job>
   
  <!--  <task:scheduled-tasks>
	<task:scheduled ref="runScheduler" method="run" fixed-delay="5000" />
  </task:scheduled-tasks> -->
	<!-- @Scheduled(cron="0 0 0 1 1/1 *") (1st of every month)  -->
	<!-- @Scheduled(cron = "0/20 * * * * ?")  every 20 sec -->
	<!-- @Scheduled(cron = "0 15 10 * * ? 2005") at 10:15 AM every day in the year 2005: -->
	<!-- @Scheduled(cron="0 0 9 25 * ?") to trigger on 25 of every month at 9 A.M  -->
  <task:scheduled-tasks>
	<task:scheduled ref="runScheduler" method="run" cron="0 48 14 4 * ?" />    <!-- every 4th of month at 2:48 : PM -->
  </task:scheduled-tasks>

</beans>